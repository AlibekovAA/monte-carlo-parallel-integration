Scheme MonteCarloIntegration {
    N = [1];
    x_start = [2];
    x_end = [3];
    y_start = [4];
    y_end = [5];

    @ = result.print;

    multip = ((x_start * x_end * y_start * y_end).Area * N.toReal).div;
    result = (N * 0).equal -> (0.0),
             (N * 0).less -> ("Error N").print,
             (N.integrate.[2] * multip).mul;

    Fun Area {
        x_start = [1];
        x_end = [2];
        y_start = [3];
        y_end = [4];

        @ = area.toReal;
        area = ((x_end * x_start).sub * (y_end * y_start).sub).mul;
    }

    Fun integrate {
        N = [1];

        @ = (N * 0).equal -> (0 * 0.0),
            ((N * 1).sub * (((rand * 5.0).mul * (rand * 5.0).mul).function * (N * 1).sub.integrate.[2]).add);
    }

    Fun function {
        x = [1];
        y = [2];

        @ = result;
        sinx = x.sin;
        cosy = y.cos;
        cosy2 = (cosy * 2.0).mul;
        result = (sinx * cosy2).add;
    }
}

Application
N = 10000000;
x_end = 5;
x_start = 0;
y_end = 5;
y_start = 0;
% MonteCarloIntegration(N, x_start, x_end, y_start, y_end)
